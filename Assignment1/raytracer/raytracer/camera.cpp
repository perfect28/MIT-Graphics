
#include "camera.h"

Camera::Camera()
{
}

Camera::~Camera()
{
}

OrthographicCamera::OrthographicCamera(Vec3f center, Vec3f dir, Vec3f up, float size)
{
	this->center = center;
	this->dir = dir;
	this->dir.Normalize();
	this->up = up;
	this->up.Normalize();
	this->size = size;
	Vec3f::Cross3(this->hor, this->dir, this->up);
}

OrthographicCamera::~OrthographicCamera()
{
}

/*
The first is used to generate rays for each screen-space coordinate,
described as a Vec2f. The direction of the rays generated by an orthographic
camera is always the same, but the origin varies. The getTMin() method
will be useful when tracing rays through the scene. For an orthographic
camera, rays always start at infinity, so tmin will be a large negative
value. However, in the next assignment you will implement a perspective
camera and the value of tmin will be zero to correctly clip objects behind
the viewpoint.
*/


/*
(0,0) -> (1,1)
center - (size*up)/2 - (size*horizontal)/2  ->  center + (size*up)/2 + (size*horizontal)/2

Ray Generation:
Origin = center + (x-0.5)*size*horizontal + (y-0.5)*size*up;
Direction is constant
*/
Ray OrthographicCamera::generateRay(Vec2f point)
{
	float x = point.x();
	float y = point.y();
	Vec3f ori = center + (x - 0.5)*size*hor + (y - 0.5)*size*up;
	Ray *ray = new Ray(ori, dir);
	return *ray;
}

float OrthographicCamera::getTMin() const
{
	float min = (numeric_limits<float>::min)();
	return min;
}